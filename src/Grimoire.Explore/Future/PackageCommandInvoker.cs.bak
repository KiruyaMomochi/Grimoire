using System;
using System.Text;
using System.Threading.Tasks;
using Grimoire.Explore.Abstractions;
using Microsoft.Extensions.DependencyInjection;

namespace Grimoire.Explore.Infrastructure
{
    public class PackageCommandInvoker : ICommandInvoker
    {
        private readonly PackageContext _packageContext;
        private readonly IServiceProvider _provider;

        public PackageCommandInvoker(PackageContext packageContext, IServiceProvider provider)
        {
            _packageContext = packageContext;
            _provider = provider;
        }
        
        internal CommandContext PackageContext => _packageContext;

        public Task InvokeAsync()
        {
            // TODO

            var parameters = new List<object>();
            foreach (var parameter in entry.CommandDescriptor.Parameters)
            {
                string? arg, args;
                (arg, args) = CommandManager.SplitText(args);
                if (arg == null || args == null) break;
                
                if (parameter.ParameterType == typeof(int) && int.TryParse(arg, out var result))
                    parameters.Add(result);
                else if (parameter.ParameterType == typeof(string))
                    parameters.Add(arg);
            }
            
            var commandDescriptor = _packageContext.CommandDescriptor;
            var packageType = commandDescriptor.PackageTypeInfo;
            var packageInstance = ActivatorUtilities.CreateInstance(_provider, packageType);
            if (packageInstance is PackageBase packageBase) packageBase.PackageContext = _packageContext;
            
            var packageMethod = commandDescriptor.MethodInfo;
            var result = packageMethod.Invoke(packageInstance, parameters);
            return result is Task task ? task : Task.CompletedTask;
        }
    }
}