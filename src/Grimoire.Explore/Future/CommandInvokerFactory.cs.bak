#nullable enable
using System.Collections.Generic;
using System.Linq;
using Grimoire.Explore.Abstractions;

namespace Grimoire.Explore.Infrastructure
{
    internal class CommandInvokerFactory : ICommandInvokerFactory
    {
        private readonly ICommandInvokerProvider[] _commandInvokerProviders;

        public CommandInvokerFactory(IEnumerable<ICommandInvokerProvider> commandInvokerProviders)
        {
            _commandInvokerProviders = commandInvokerProviders
                .OrderBy(p => p.Order)
                .ToArray();
        }

        public ICommandInvoker? CreateInvoker(CommandContext commandContext)
        {
            var context = new CommandInvokerProviderContext(commandContext);

            foreach (var provider in _commandInvokerProviders)
            {
                provider.OnProvidersExecuting(context);
            }

            for (var i = _commandInvokerProviders.Length - 1; i >= 0; i--)
            {
                _commandInvokerProviders[i].OnProvidersExecuted(context);
            }

            return context.Result;
        }
    }
}